#include<bits/stdc++.h>
using namespace std;

class node{
    public:
            node* lChild;
            int data;
            node* rChild;
};

void createTree(node* root){
    int x;
    queue<node*> q;
    node* p;
    node* t;
    cout<<"Enter Root Value : ";
    cin>>x;
    root->data = x;
    root->lChild = nullptr;
    root->rChild = nullptr;
    q.push(root);
    
    while(!q.empty()){
        p=q.front();
        q.pop();
        
        cout<<"Enter LeftChild of "<<p->data<<" : ";
        cin>>x;
        if(x!=-100){
            t=new node;
            t->data = x;
            t->lChild = nullptr;
            t->rChild = nullptr;
            p->lChild = t;
            q.push(t);
        }
        
        cout<<"Enter RightChild of "<<p->data<<" : ";
        cin>>x;
        if(x!=-100){
            t=new node;
            t->data = x;
            t->lChild = nullptr;
            t->rChild = nullptr;
            p->rChild = t;
            q.push(t);
        }
    }
}

int height(node* p){
    if(p==nullptr)
        return 0;
    int l = height(p->lChild);
    int r = height(p->rChild);
    
    return ((l>r) ? l+1 : r+1);
}

void maxSumLevelUtil(node* p,int lvl, int &s){
    if(p==NULL)
        return;
    if(lvl==1){
        s = s + p->data;
    }else{
        maxSumLevelUtil(p->lChild,lvl-1,s);
        maxSumLevelUtil(p->rChild,lvl-1,s);
    }
}

int maxSumLevel(node* h){
    int sum=INT_MIN,sum_u;
    for(int i=1;i<=height(h);i++){
        sum_u=0;
        maxSumLevelUtil(h,i,sum_u);
        sum = max(sum,sum_u);
    }
    return sum;
}

int main(){
    
    node* root = new node;
    createTree(root);
    cout<<maxSumLevel(root);
    return 0;
}