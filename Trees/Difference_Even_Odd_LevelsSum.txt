#include<bits/stdc++.h>
using namespace std;

class node{
    public:
            node* lChild;
            int data;
            node* rChild;
};

void createTree(node* root){
    int x;
    queue<node*> q;
    node* p;
    node* t;
    cout<<"Enter Root Value : ";
    cin>>x;
    root->data = x;
    root->lChild = nullptr;
    root->rChild = nullptr;
    q.push(root);
    
    while(!q.empty()){
        p=q.front();
        q.pop();
        
        cout<<"Enter LeftChild of "<<p->data<<" : ";
        cin>>x;
        if(x!=-1){
            t=new node;
            t->data = x;
            t->lChild = nullptr;
            t->rChild = nullptr;
            p->lChild = t;
            q.push(t);
        }
        
        cout<<"Enter RightChild of "<<p->data<<" : ";
        cin>>x;
        if(x!=-1){
            t=new node;
            t->data = x;
            t->lChild = nullptr;
            t->rChild = nullptr;
            p->rChild = t;
            q.push(t);
        }
    }
}

int height(node* p){
    if(p==NULL)
        return 0;
    int l = height(p->lChild);
    int r = height(p->rChild);
    return (max(l,r) + 1);
}

//This function is Modified LevelOrderTraversal
void maxDepthSumUtil(node* root, int *sum, int h){
    if(root==NULL)
        return;
    if(h==1)
        *sum += root->data;
    else{
        maxDepthSumUtil(root->lChild,sum,h-1);
        maxDepthSumUtil(root->rChild,sum,h-1);
    }
}

int maxDepthSum(node* root){
    if(root==NULL)
        return 0;
    int eSum = 0 , oSum = 0;
    for(int i=1;i<=height(root);i++){
        if(i%2==0)
            maxDepthSumUtil(root,&eSum,i);
        else
            maxDepthSumUtil(root,&oSum,i);
    }
    return ((oSum>eSum) ? oSum - eSum : eSum - oSum);
}

int main(){
    
    node* root = new node;
    createTree(root);
    cout<<maxDepthSum(root);
    return 0;
}