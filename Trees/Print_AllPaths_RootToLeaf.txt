#include<bits/stdc++.h>
using namespace std;

class node{
    public:
            node* lChild;
            int data;
            node* rChild;
};

void createTree(node* root){
    int x;
    queue<node*> q;
    node* p;
    node* t;
    cout<<"Enter Root Value : ";
    cin>>x;
    root->data = x;
    root->lChild = nullptr;
    root->rChild = nullptr;
    q.push(root);
    
    while(!q.empty()){
        p=q.front();
        q.pop();
        
        cout<<"Enter LeftChild of "<<p->data<<" : ";
        cin>>x;
        if(x!=-1){
            t=new node;
            t->data = x;
            t->lChild = nullptr;
            t->rChild = nullptr;
            p->lChild = t;
            q.push(t);
        }
        
        cout<<"Enter RightChild of "<<p->data<<" : ";
        cin>>x;
        if(x!=-1){
            t=new node;
            t->data = x;
            t->lChild = nullptr;
            t->rChild = nullptr;
            p->rChild = t;
            q.push(t);
        }
    }
}

bool getPath(node* r, vector<int> &p, int k){
    if(!r)
        return false;
    p.push_back(r->data);
    if(r->data==k)
        return k;
    if(getPath(r->lChild,p,k) || getPath(r->rChild,p,k))
        return true;
    p.pop_back();
    return false;
}

void findLeafs(node* r,vector<int> &v){
    if(!r)
        return;
    if(r->lChild==nullptr && r->rChild==nullptr){
        v.push_back(r->data);
        return;
    }
    findLeafs(r->lChild, v);
    findLeafs(r->rChild, v);
}

void allLeafPaths(node* ptr){
    if(!ptr)
        cout<<"Empty Tree";
    std::vector<int> v;
    std::vector<int> p;
    findLeafs(ptr,v);
    for(int i=0;i<v.size();i++){
        getPath(ptr,p,v[i]);
        for(int j=0;j<p.size();j++)
            cout<<p[j]<<" ";
        cout<<endl;
        p.clear();
    }
}

int main(){
    
    node* root = new node;
    createTree(root);
    allLeafPaths(root);
    return 0;
}