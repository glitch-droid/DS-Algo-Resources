#include<bits/stdc++.h>
using namespace std;

class node{
    public:
            node* lChild;
            int data;
            node* rChild;
};

void createTree(node* root){
    int x;
    queue<node*> q;
    node* p;
    node* t;
    cout<<"Enter Root Value : ";
    cin>>x;
    root->data = x;
    root->lChild = nullptr;
    root->rChild = nullptr;
    q.push(root);
    
    while(!q.empty()){
        p=q.front();
        q.pop();
        
        cout<<"Enter LeftChild of "<<p->data<<" : ";
        cin>>x;
        if(x!=-1){
            t=new node;
            t->data = x;
            t->lChild = nullptr;
            t->rChild = nullptr;
            p->lChild = t;
            q.push(t);
        }
        
        cout<<"Enter RightChild of "<<p->data<<" : ";
        cin>>x;
        if(x!=-1){
            t=new node;
            t->data = x;
            t->lChild = nullptr;
            t->rChild = nullptr;
            p->rChild = t;
            q.push(t);
        }
    }
}

vector<int> findLongestPath(node* root){
    if(root==nullptr){
        vector<int> k ={};
        return k;
    }
    
    vector<int> left = findLongestPath(root->lChild);
    vector<int> right = findLongestPath(root->rChild);
    
    if(left.size()>right.size())
        left.push_back(root->data);
    else
        right.push_back(root->data);
        
    return (left.size() > right.size() ? left : right );
}

int main(){
    
    node* root = new node;
    createTree(root);
    vector<int> v = findLongestPath(root);
    int sum=0;
    for(int i=v.size()-1;i>=0;i--)
        sum+=v[i];
    cout<<sum;
    return 0;
}