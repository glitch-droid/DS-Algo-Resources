#include<bits/stdc++.h>
using namespace std;

class node{
    public:
            node* lChild;
            int data;
            node* rChild;
};

void createTree(node* root){
    int x;
    queue<node*> q;
    node* p;
    node* t;
    cout<<"Enter Root Value : ";
    cin>>x;
    root->data = x;
    root->lChild = nullptr;
    root->rChild = nullptr;
    q.push(root);
    
    while(!q.empty()){
        p=q.front();
        q.pop();
        
        cout<<"Enter LeftChild of "<<p->data<<" : ";
        cin>>x;
        if(x!=-1){
            t=new node;
            t->data = x;
            t->lChild = nullptr;
            t->rChild = nullptr;
            p->lChild = t;
            q.push(t);
        }
        
        cout<<"Enter RightChild of "<<p->data<<" : ";
        cin>>x;
        if(x!=-1){
            t=new node;
            t->data = x;
            t->lChild = nullptr;
            t->rChild = nullptr;
            p->rChild = t;
            q.push(t);
        }
    }
}

void preOrder(node* p, int *n){
    if(p){
        *n+=1;
        preOrder(p->lChild,n);
        preOrder(p->rChild,n);
    }else{
        return;
    }
}

int height(struct node* node) 
{ 
	if (node == NULL) 
		return 0; 
	else { 
		/* compute the height of each subtree */
		int lheight = height(node->lChild); 
		int rheight = height(node->rChild); 

		/* use the larger one */
		if (lheight > rheight) 
			return (lheight + 1); 
		else
			return (rheight + 1); 
	} 
} 


int main(){
    
    node* root = new node;
    createTree(root);
    int n=0,h;
    preOrder(root,&n);
    h=height(root);
    if((pow(2,h)-1)==n){
        cout<<"Perfect Binary Tree";
    }else{
        cout<<"Not Perfect";
    }
    return 0;
}