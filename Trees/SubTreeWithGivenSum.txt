#include<bits/stdc++.h>
using namespace std;

class node{
    public:
            node* lChild;
            int data;
            node* rChild;
};

void createTree(node* root){
    int x;
    queue<node*> q;
    node* p;
    node* t;
    cout<<"Enter Root Value : ";
    cin>>x;
    root->data = x;
    root->lChild = nullptr;
    root->rChild = nullptr;
    q.push(root);
    
    while(!q.empty()){
        p=q.front();
        q.pop();
        
        cout<<"Enter LeftChild of "<<p->data<<" : ";
        cin>>x;
        if(x!=-1){
            t=new node;
            t->data = x;
            t->lChild = nullptr;
            t->rChild = nullptr;
            p->lChild = t;
            q.push(t);
        }
        
        cout<<"Enter RightChild of "<<p->data<<" : ";
        cin>>x;
        if(x!=-1){
            t=new node;
            t->data = x;
            t->lChild = nullptr;
            t->rChild = nullptr;
            p->rChild = t;
            q.push(t);
        }
    }
}

bool subTreeSumUtil(node* root, int *curr, int sum){
    if(root==NULL){
        *curr = 0;
        return false;
    }
    
    int lSum=0,rSum=0;
    return (subTreeSumUtil(root->lChild,&lSum,sum) ||
            subTreeSumUtil(root->rChild,&rSum,sum) ||
            ((*curr = root->data + lSum + rSum)==sum) );
}

bool subTreeSum(node* root, int sum){
    if(root==NULL)
        return false;
    int curr_sum = 0;
    return subTreeSumUtil(root,&curr_sum,sum);
}

int main(){
    
    node* root = new node;
    createTree(root);
    subTreeSum(root,17) ? cout<<"Yes"  : cout<<"No";
    return 0;
}