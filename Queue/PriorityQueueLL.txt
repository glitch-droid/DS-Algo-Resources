#include<iostream>
using namespace std;

//PRIORITY_QUEUE class definition starts
//Higher Number higher PRIORITY

class node{
    public:
            int data;
            int prio;
            node* next;
};

class Queue{
    private:
            node* front=nullptr;
            node* rear=nullptr;
            int sz=0;
    public:
            void enqueue(int val, int p);
            void dequeue();
            int getFront();
            int getRear();
            void disp();
            int size();
            bool isEmpty();
};

void Queue::enqueue(int val, int p){
    node* t=new node;
    t->data=val;
    t->prio=p;
    t->next=nullptr;
    sz++;
    if(front==nullptr){
        front=t;
        rear=t;
    }else{
        if(t->prio>=front->prio){
            t->next=front;
            front=t;
        }else if(t->prio<=rear->prio){
            rear->next=t;
            rear=t;
        }else{
            node* p=front;
            while(p!=rear){
                if(t->prio<p->prio && t->prio>=p->next->prio){
                    node* q=p->next;
                    p->next=t;
                    t->next=q;
                    break;
                }
                p=p->next;
            }
        }
    }
}

void Queue::dequeue(){
    if(front==nullptr){
        cout<<"Queue is Empty"<<endl;
    }else{
        node* p=front;
        front=front->next;
        p->next=nullptr;
        delete p;
        sz--;
    }
}

int Queue::getFront(){
    if(front!=nullptr){
        return front->data;
    }else{
        return -1;
    }
}

int Queue::getRear(){
    if(rear!=nullptr){
        return rear->data;
    }else{
        return -1;
    }
}

int Queue::size(){
    return sz;
}

bool Queue::isEmpty(){
    if(front==nullptr){
        return true;
    }else{
        return false;
    }
}

void Queue::disp(){
    node* p=front;
    while(p){
        cout<<p->data<<" ";
        p=p->next;
    }
    cout<<endl;
}

//QUEUE class definition ends

int main(){
    Queue q;
    q.enqueue(10,5);
    q.enqueue(20,2);
    q.enqueue(30,10);
    q.enqueue(40,4);
    q.enqueue(50,7);
    q.dequeue();
    q.disp();
}
#include<iostream>
using namespace std;

//PRIORITY_QUEUE class definition starts
//Higher Number higher PRIORITY

class node{
    public:
            int data;
            int prio;
            node* next;
};

class Queue{
    private:
            node* front=nullptr;
            node* rear=nullptr;
            int sz=0;
    public:
            void enqueue(int val, int p);
            void dequeue();
            int getFront();
            int getRear();
            void disp();
            int size();
            bool isEmpty();
};

void Queue::enqueue(int val, int p){
    node* t=new node;
    t->data=val;
    t->prio=p;
    t->next=nullptr;
    sz++;
    if(front==nullptr){
        front=t;
        rear=t;
    }else{
        if(t->prio>=front->prio){
            t->next=front;
            front=t;
        }else if(t->prio<=rear->prio){
            rear->next=t;
            rear=t;
        }else{
            node* p=front;
            while(p!=rear){
                if(t->prio<p->prio && t->prio>=p->next->prio){
                    node* q=p->next;
                    p->next=t;
                    t->next=q;
                    break;
                }
                p=p->next;
            }
        }
    }
}

void Queue::dequeue(){
    if(front==nullptr){
        cout<<"Queue is Empty"<<endl;
    }else{
        node* p=front;
        front=front->next;
        p->next=nullptr;
        delete p;
        sz--;
    }
}

int Queue::getFront(){
    if(front!=nullptr){
        return front->data;
    }else{
        return -1;
    }
}

int Queue::getRear(){
    if(rear!=nullptr){
        return rear->data;
    }else{
        return -1;
    }
}

int Queue::size(){
    return sz;
}

bool Queue::isEmpty(){
    if(front==nullptr){
        return true;
    }else{
        return false;
    }
}

void Queue::disp(){
    node* p=front;
    while(p){
        cout<<p->data<<" ";
        p=p->next;
    }
    cout<<endl;
}

//QUEUE class definition ends

int main(){
    Queue q;
    q.enqueue(10,5);
    q.enqueue(20,2);
    q.enqueue(30,10);
    q.enqueue(40,4);
    q.enqueue(50,7);
    q.dequeue();
    q.disp();
}
